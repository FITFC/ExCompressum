buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        mavenCentral()
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    // This is only here while FG is under active development
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 10, "seconds"
            cacheChangingModulesFor 0, "seconds"
        }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: patch_version

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

version = major_version + "." + minor_version + "." + BUILD_NUMBER
group = "net.blay09.mods"
archivesBaseName = mod_name + "_" + minecraft_version

sourceSets {
    api {
        compileClasspath += sourceSets.main.compileClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output

        ext.refMap = "refmap.excompressum.json"
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=mixins.excompressum.json"

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            mods {
                excompressum {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        server {
            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=mixins.excompressum.json"

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            mods {
                excompressum {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=mixins.excompressum.json"

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/')

            mods {
                excompressum {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    /*maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }*/
    flatDir {
        dirs "run/obfmods"
    }
}

dependencies {
    minecraft([
            group  : "${forge_group}",
            name   : "forge",
            version: "${minecraft_version}-${forge_version}"
    ])

    compileOnly "inventory-tweaks:InventoryTweaks:1.64+dev.146"
    compileOnly fg.deobf("mezz.jei:jei-1.16.2:7.3.0.22:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.2:7.3.0.22")
    compile fg.deobf("curse.maven:exnihilosequentia-400012:3199969")
    compile fg.deobf("curse.maven:hwyla-253449:3033593")
    compile fg.deobf("curse.maven:the-one-probe-245211:3108607")
    compile fg.deobf("curse.maven:botania-225643:3086502")
    compile fg.deobf("curse.maven:curios-309927:3122651")
    compile fg.deobf("curse.maven:patchouli-306770:3086492")
    compile fg.deobf("curse.maven:crafttweaker-239197:3185109")

    /*compile fg.deobf("curse.maven:evilcraft-74610:3206360")
    compile fg.deobf("curse.maven:cyclops-core-232758:3207425")*/

    /*deobfCompile "tinkers-construct:TConstruct:1.12.2:2.12.0.135"
    deobfCompile "mantle:Mantle:1.12:1.3.3.49"*/

    def obfModsDir = new File("run/obfmods")
    if(obfModsDir.exists()) {
        obfModsDir.eachFile { file ->
            def parts = file.name.split('-', 2)
            def dep = "ignored:" + parts[0] + ":" + parts[1].replace(".jar", "");
            runtimeOnly fg.deobf(dep)
        }
    }
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : "BlayTheNinth",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "BlayTheNinth",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs": "mixins.excompressum.json"])
    }
}
